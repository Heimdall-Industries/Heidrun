/// <reference types="node" />
import { Provider, web3 } from '@project-serum/anchor';
import BN from 'bn.js';
/**
 * Returns a program address and bump seed of an associated token account for a designated mint
 *
 * @param mint - Asset mint
 * @param buyer
 */
export declare function getAtaForMint(mint: web3.PublicKey, buyer: web3.PublicKey): Promise<[web3.PublicKey, number]>;
/**
 *  Create a new account to hold tokens from the provided mint.
 *
 * @param provider
 * @param mint - Asset mint to create token account for
 * @param payer (Optional - if not provided, defaults to provider wallet)
 * @param owner (Optional - if not provided, defaults to provider wallet)
 */
export declare function createATokenAccount(provider: Provider, mint: web3.PublicKey, payer?: web3.PublicKey, owner?: web3.PublicKey): Promise<web3.PublicKey>;
export declare class Numberu32 extends BN {
    /**
     * Convert to Buffer representation
     */
    toBuffer(): Buffer;
    /**
     * Construct a Numberu32 from Buffer representation
     */
    static fromBuffer(buffer: any): BN;
}
/**
 * Request more compute units for solana transcations
*/
export declare function createRequestUnitsInstruction(payer: web3.PublicKey): Promise<web3.TransactionInstruction>;
/**
 * Returns an instruction which can be used to create an associated token account for a designated mint
 *
 * @param payer
 * @param owner
 * @param mint - Asset mint to create token account for
 */
export declare function createAssociatedTokenAccountInstruction(associatedTokenAccount: web3.PublicKey, payer: web3.PublicKey, owner: web3.PublicKey, mint: web3.PublicKey): Promise<web3.TransactionInstruction>;
/**
 * Mints tokens to associated token account
 *
 * @param provider
 * @param mint - Asset mint
 * @param destinationTokenAccount - Account for minted tokens to be deposited into
 * @param amount - Desired number of tokens to be minted
 * @param mintAuthority - Publickey of mint authority
 */
export declare function mintTokens(provider: Provider, mint: web3.PublicKey, destinationTokenAccount: web3.PublicKey, amount: number, mintAuthority?: web3.PublicKey): Promise<web3.TransactionSignature>;
/**
 * Creates a new account and calls the Token program to initialize the account as a mint.
 *
 * @param provider
 * @param decimals - Number of decimals in token account amount
 */
export declare function createMint(provider: Provider, decimals: number, mintAuthority?: web3.PublicKey, freezeAuthority?: web3.PublicKey): Promise<web3.PublicKey>;
/**
 * Asserts that the balance of a token account matches the provided expected quantity
 *
 * @param provider - Connection/wallet context
 * @param tokenAccount - Public key of account to be confirmed
 * @param expectedQuantity - Expected number of tokens in account
 */
export declare function confirmTokenBalance(provider: Provider, tokenAccount: web3.PublicKey, expectedQuantity: number, confirmClosed?: boolean): Promise<void>;
/**
 * Transfers tokens between designated wallets and retursn a transaction signature.
 *
 * @param provider - Connection/wallet context
 * @param fromWallet - Source account
 * @param toWallet - Destination account
 * @param amount - Number of tokens to transfer
 */
export declare function sendTokens(provider: Provider, // Keep provider or add connection and pass in owner?
fromWallet: web3.PublicKey, toWallet: web3.PublicKey, amount: number): Promise<web3.TransactionSignature>;
//# sourceMappingURL=scoreHelpers.d.ts.map
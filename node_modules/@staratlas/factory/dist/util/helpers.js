"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.getAssociatedTokenAddress = exports.convertFactionStringToNum = exports.longToByteArray = exports.byteArrayToLong = exports.stringToByteArray = exports.byteArrayToString = void 0;
var __1 = require("..");
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
function byteArrayToString(array) {
    return String.fromCharCode.apply(String, array);
}
exports.byteArrayToString = byteArrayToString;
function stringToByteArray(str, length) {
    if (str.length > length) {
        console.log("Unable to get byte array, length greater than " + length);
        return null;
    }
    var byteArray = [];
    for (var i = 0; i < length; i += 1) {
        var code = 32;
        if (i < str.length) {
            code = str.charCodeAt(i);
        }
        byteArray = byteArray.concat([code]);
    }
    return byteArray;
}
exports.stringToByteArray = stringToByteArray;
function byteArrayToLong(byteArray) {
    var value = 0;
    for (var i = byteArray.length - 1; i >= 0; i -= 1) {
        value = (value * 256) + byteArray[i];
    }
    return value;
}
exports.byteArrayToLong = byteArrayToLong;
function longToByteArray(long) {
    var byteArray = [0, 0, 0, 0, 0, 0, 0, 0];
    for (var index = 0; index < byteArray.length; index += 1) {
        var byte = long & 0xff;
        byteArray[index] = byte;
        long = (long - byte) / 256;
    }
    return byteArray;
}
exports.longToByteArray = longToByteArray;
/**
 * Helper function to switch case string inputs for faction filter
 */
function convertFactionStringToNum(factionName) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (factionName.toLowerCase()) {
                case 'mud':
                    return [2 /*return*/, __1.FactionType.MUD];
                case 'oni':
                    return [2 /*return*/, __1.FactionType.ONI];
                case 'ustur':
                    return [2 /*return*/, __1.FactionType.Ustur];
                default:
                    return [2 /*return*/, __1.FactionType.Unenlisted];
            }
            return [2 /*return*/];
        });
    });
}
exports.convertFactionStringToNum = convertFactionStringToNum;
/**
 * Get associated token address
 *
 * @param owner - the public key that owns the associated token address
 * @param mint - the mint
 * @returns a promise of the associated token address
 */
function getAssociatedTokenAddress(owner, mint) {
    return __awaiter(this, void 0, void 0, function () {
        var address;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID)];
                case 1:
                    address = (_a.sent())[0];
                    return [2 /*return*/, address];
            }
        });
    });
}
exports.getAssociatedTokenAddress = getAssociatedTokenAddress;
//# sourceMappingURL=helpers.js.map
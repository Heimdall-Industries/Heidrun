"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
exports.__esModule = true;
exports.getPlayerOrg = exports.getAllPlayerMembers = exports.getAllPlayerOrgs = exports.ORG_SCHEMA = exports.PlayerOrgMember = exports.PlayerOrg = exports.PlayerOrgInfo = exports.leaveOrganization = exports.leaveOrganizationInstruction = exports.joinOrganization = exports.joinOrganizationInstruction = exports.approvePlayer = exports.approvePlayerInstruction = exports.createOrganization = exports.createOrganizationInstruction = exports.initOrganizationInfo = exports.initOrganizationInfoInstruction = exports.getOrganizationOwner = exports.getPlayerMemberAccount = exports.getOrganizationAccount = exports.getOrgInfoAccount = exports.getOrgNameBytes = void 0;
var web3_js_1 = require("@solana/web3.js");
var util_1 = require("./util");
var factions_1 = require("./factions");
var borsh_1 = require("borsh");
var MAX_ORG_NAME_LENGTH = 32;
var ORG_INFO_PREFIX = 'ORG_INFO';
var ORG_NAME_PREFIX = 'ORG';
var JOIN_ORG_PREFIX = 'JOIN';
/**
 * Convert organization name string to byte array
 */
function getOrgNameBytes(name) {
    if (name.length > MAX_ORG_NAME_LENGTH) {
        console.log('Unable to create player org, length greater than', MAX_ORG_NAME_LENGTH);
        throw 'Unable to get org name bytes';
    }
    return util_1.stringToByteArray(name, MAX_ORG_NAME_LENGTH);
}
exports.getOrgNameBytes = getOrgNameBytes;
/**
 * Get the organization info account
 */
function getOrgInfoAccount(organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([
                        Buffer.from(ORG_INFO_PREFIX, 'utf8'),
                        organizationProgramId.toBuffer(),
                    ], organizationProgramId)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getOrgInfoAccount = getOrgInfoAccount;
/**
 * Get the organization account based on the name
 */
function getOrganizationAccount(name, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([
                        Buffer.from(ORG_NAME_PREFIX, 'utf8'),
                        Buffer.from(name.padEnd(32, ' '), 'utf8')
                    ], organizationProgramId)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getOrganizationAccount = getOrganizationAccount;
/**
 * Get the player's member account for a specific organization
 */
function getPlayerMemberAccount(name, playerKey, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([
                        playerKey.toBuffer(),
                        Buffer.from(JOIN_ORG_PREFIX, 'utf8'),
                        Buffer.from(name.padEnd(32, ' '), 'utf8')
                    ], organizationProgramId)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getPlayerMemberAccount = getPlayerMemberAccount;
/**
 * Get player organization owner
 */
function getOrganizationOwner(name, connection, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var playerOrgPda, info;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getOrganizationAccount(name, organizationProgramId)];
                case 1:
                    playerOrgPda = (_a.sent())[0];
                    return [4 /*yield*/, connection.getAccountInfo(playerOrgPda, 'recent')];
                case 2:
                    info = _a.sent();
                    // TODO: deserialize here
                    return [2 /*return*/, new web3_js_1.PublicKey(info.data.slice(81, 113))];
            }
        });
    });
}
exports.getOrganizationOwner = getOrganizationOwner;
/**
 * Create initialize player organization info account instruction
 */
function initOrganizationInfoInstruction(payerKey, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var playerOrgInfoPda;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getOrgInfoAccount(organizationProgramId)];
                case 1:
                    playerOrgInfoPda = (_a.sent())[0];
                    return [2 /*return*/, new web3_js_1.TransactionInstruction({
                            keys: [{ pubkey: payerKey, isSigner: true, isWritable: true },
                                { pubkey: playerOrgInfoPda, isSigner: false, isWritable: true },
                                { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false }],
                            programId: organizationProgramId,
                            data: Buffer.from([0])
                        })];
            }
        });
    });
}
exports.initOrganizationInfoInstruction = initOrganizationInfoInstruction;
/**
 * Initialize player organization info account
 */
function initOrganizationInfo(connection, payerKeypair, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var instruction, transaction, txResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, initOrganizationInfoInstruction(payerKeypair.publicKey, organizationProgramId)];
                case 1:
                    instruction = _a.sent();
                    transaction = new web3_js_1.Transaction().add(instruction);
                    return [4 /*yield*/, util_1.sendAndConfirmTransaction(connection, transaction, payerKeypair)];
                case 2:
                    txResult = _a.sent();
                    return [2 /*return*/, txResult];
            }
        });
    });
}
exports.initOrganizationInfo = initOrganizationInfo;
/**
 * Create a Create Player Organization transaction instruction
 */
function createOrganizationInstruction(name, factionID, maxPlayers, taxRate, isPrivate, payerKey, organizationProgramId, factionEnlistmentProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var playerFactionPda, isPrivateNum, nameByteArray, playerOrgPda, playerOrgInfoPda;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, factions_1.getPlayerFactionPDA(payerKey, factionEnlistmentProgramId)];
                case 1:
                    playerFactionPda = (_a.sent())[0];
                    isPrivateNum = isPrivate ? 1 : 0;
                    nameByteArray = getOrgNameBytes(name);
                    return [4 /*yield*/, getOrganizationAccount(name, organizationProgramId)];
                case 2:
                    playerOrgPda = (_a.sent())[0];
                    return [4 /*yield*/, getOrgInfoAccount(organizationProgramId)];
                case 3:
                    playerOrgInfoPda = (_a.sent())[0];
                    // Create Player Organization
                    return [2 /*return*/, new web3_js_1.TransactionInstruction({
                            keys: [{ pubkey: payerKey, isSigner: true, isWritable: true },
                                { pubkey: playerFactionPda, isSigner: false, isWritable: false },
                                { pubkey: playerOrgPda, isSigner: false, isWritable: true },
                                { pubkey: playerOrgInfoPda, isSigner: false, isWritable: true },
                                { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },
                                { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false }],
                            programId: organizationProgramId,
                            data: Buffer.from(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([1], util_1.longToByteArray(factionID)), nameByteArray), util_1.longToByteArray(maxPlayers)), util_1.longToByteArray(taxRate)), [isPrivateNum]))
                        })];
            }
        });
    });
}
exports.createOrganizationInstruction = createOrganizationInstruction;
/**
 * Create a player organization
 *
 * Initialize player organization info account
 * name: name of organization
 * factionID: faction this organization belongs to
 * maxPlayers: max amount of approved players
 * taxRate: tax rate for organization
 * isPrivate: if set, requires owner to approve all players
 * payerKey: account to create organization from - signer + pays fees
 * organizationProgramId: program Id for organizations
 */
function createOrganization(connection, name, factionID, maxPlayers, taxRate, isPrivate, payerKeypair, organizationProgramId, factionEnlistmentProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var instruction, transaction, txResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, createOrganizationInstruction(name, factionID, maxPlayers, taxRate, isPrivate, payerKeypair.publicKey, organizationProgramId, factionEnlistmentProgramId)];
                case 1:
                    instruction = _a.sent();
                    transaction = new web3_js_1.Transaction().add(instruction);
                    return [4 /*yield*/, util_1.sendAndConfirmTransaction(connection, transaction, payerKeypair)];
                case 2:
                    txResult = _a.sent();
                    return [2 /*return*/, txResult];
            }
        });
    });
}
exports.createOrganization = createOrganization;
/**
 * Create an Approve Player transaction instruction
 */
function approvePlayerInstruction(name, ownerKey, playerKey, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var playerOrgPda, playerMemberPda;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getOrganizationAccount(name, organizationProgramId)];
                case 1:
                    playerOrgPda = (_a.sent())[0];
                    return [4 /*yield*/, getPlayerMemberAccount(name, playerKey, organizationProgramId)];
                case 2:
                    playerMemberPda = (_a.sent())[0];
                    // Approve Player
                    return [2 /*return*/, new web3_js_1.TransactionInstruction({
                            keys: [{ pubkey: ownerKey, isSigner: true, isWritable: true },
                                { pubkey: playerOrgPda, isSigner: false, isWritable: true },
                                { pubkey: playerMemberPda, isSigner: false, isWritable: true }],
                            programId: organizationProgramId,
                            data: Buffer.from([2])
                        })];
            }
        });
    });
}
exports.approvePlayerInstruction = approvePlayerInstruction;
/**
 * Approve a player to join an organization
 * (for private orgs only)
 *
 * name: name of organization
 * ownerKeypair: owner of organization - signer
 * playerKey: player to approve
 * organizationProgramId: program Id for organizations
 */
function approvePlayer(connection, name, ownerKeypair, playerKey, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var instruction, transaction, txResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, approvePlayerInstruction(name, ownerKeypair.publicKey, playerKey, organizationProgramId)];
                case 1:
                    instruction = _a.sent();
                    transaction = new web3_js_1.Transaction().add(instruction);
                    return [4 /*yield*/, util_1.sendAndConfirmTransaction(connection, transaction, ownerKeypair)];
                case 2:
                    txResult = _a.sent();
                    return [2 /*return*/, txResult];
            }
        });
    });
}
exports.approvePlayer = approvePlayer;
/**
 * Create a Join Organization transaction instruction
 */
function joinOrganizationInstruction(name, factionID, playerKey, ownerKey, playerIsSigned, ownerIsSigned, organizationProgramId, factionEnlistmentProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var playerFactionPda, nameByteArray, playerOrgPda, playerMemberPda;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, factions_1.getPlayerFactionPDA(playerKey, factionEnlistmentProgramId)];
                case 1:
                    playerFactionPda = (_a.sent())[0];
                    nameByteArray = getOrgNameBytes(name);
                    return [4 /*yield*/, getOrganizationAccount(name, organizationProgramId)];
                case 2:
                    playerOrgPda = (_a.sent())[0];
                    return [4 /*yield*/, getPlayerMemberAccount(name, playerKey, organizationProgramId)];
                case 3:
                    playerMemberPda = (_a.sent())[0];
                    // Join Player Organization
                    return [2 /*return*/, new web3_js_1.TransactionInstruction({
                            keys: [{ pubkey: playerKey, isSigner: playerIsSigned, isWritable: true },
                                { pubkey: playerFactionPda, isSigner: false, isWritable: true },
                                { pubkey: playerOrgPda, isSigner: false, isWritable: true },
                                { pubkey: playerMemberPda, isSigner: false, isWritable: true },
                                { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: true },
                                { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: true },
                                { pubkey: ownerKey, isSigner: ownerIsSigned, isWritable: true }],
                            programId: organizationProgramId,
                            data: Buffer.from(__spreadArray(__spreadArray([3], util_1.longToByteArray(factionID)), nameByteArray))
                        })];
            }
        });
    });
}
exports.joinOrganizationInstruction = joinOrganizationInstruction;
/**
 * Join a player organization
 *
 * name: name of organization
 * factionID: factionID of organization
 * playerKey: player to join organization
 * playerIsSigned: if player joins themselves, player needs to sign
 * ownerIsSigned: if owner joins a player, owner needs to sign
 * connection: Solana Connection
 * organizationProgramId: program Id for organizations
 */
function joinOrganization(connection, name, factionID, playerKeypair, ownerKeypair, playerIsSigned, ownerIsSigned, organizationProgramId, factionEnlistmentProgramId) {
    if (playerKeypair === void 0) { playerKeypair = null; }
    if (ownerKeypair === void 0) { ownerKeypair = null; }
    return __awaiter(this, void 0, void 0, function () {
        var ownerPubkey, instruction, signerKeypair, transaction, txResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getOrganizationOwner(name, connection, organizationProgramId)];
                case 1:
                    ownerPubkey = _a.sent();
                    if (ownerKeypair && ownerPubkey.toBase58() != ownerKeypair.publicKey.toBase58()) {
                        throw 'Unable to join organization, owner account mismatch';
                    }
                    return [4 /*yield*/, joinOrganizationInstruction(name, factionID, playerKeypair.publicKey, ownerPubkey, playerIsSigned, ownerIsSigned, organizationProgramId, factionEnlistmentProgramId)];
                case 2:
                    instruction = _a.sent();
                    if (playerIsSigned && !ownerIsSigned) {
                        signerKeypair = playerKeypair;
                    }
                    else if (!playerIsSigned && ownerIsSigned) {
                        signerKeypair = ownerKeypair;
                    }
                    else {
                        throw 'Invalid mismatch: only player or owner can sign transaction';
                    }
                    transaction = new web3_js_1.Transaction().add(instruction);
                    return [4 /*yield*/, util_1.sendAndConfirmTransaction(connection, transaction, signerKeypair)];
                case 3:
                    txResult = _a.sent();
                    return [2 /*return*/, txResult];
            }
        });
    });
}
exports.joinOrganization = joinOrganization;
/**
 * Create a Leave Organization transaction instruction
 */
function leaveOrganizationInstruction(name, factionID, playerKey, ownerKey, playerIsSigned, ownerIsSigned, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var nameByteArray, playerOrgPda, playerMemberPda;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    nameByteArray = getOrgNameBytes(name);
                    return [4 /*yield*/, getOrganizationAccount(name, organizationProgramId)];
                case 1:
                    playerOrgPda = (_a.sent())[0];
                    return [4 /*yield*/, getPlayerMemberAccount(name, playerKey, organizationProgramId)];
                case 2:
                    playerMemberPda = (_a.sent())[0];
                    // Leave Organization
                    return [2 /*return*/, new web3_js_1.TransactionInstruction({
                            keys: [{ pubkey: playerKey, isSigner: playerIsSigned, isWritable: true },
                                { pubkey: ownerKey, isSigner: ownerIsSigned, isWritable: true },
                                { pubkey: playerOrgPda, isSigner: false, isWritable: true },
                                { pubkey: playerMemberPda, isSigner: false, isWritable: true }],
                            programId: organizationProgramId,
                            data: Buffer.from(__spreadArray(__spreadArray([4], util_1.longToByteArray(factionID)), nameByteArray))
                        })];
            }
        });
    });
}
exports.leaveOrganizationInstruction = leaveOrganizationInstruction;
/**
 * Leave an organization
 *
 * (or Kick a player from the organization via Owner)
 *
 * name: name of organization
 * factionID: factionID of organization
 * playerKey: player to join organization
 * ownerKey: owner of organization - can kick player from organization
 * playerIsSigned: if player joins themselves, player needs to sign
 * ownerIsSigned: if owner joins a player, owner needs to sign
 * connection: Solana Connection
 * organizationProgramId: program Id for organizations
 */
function leaveOrganization(name, factionID, playerKeypair, ownerKeypair, playerIsSigned, ownerIsSigned, connection, organizationProgramId) {
    if (playerKeypair === void 0) { playerKeypair = null; }
    if (ownerKeypair === void 0) { ownerKeypair = null; }
    return __awaiter(this, void 0, void 0, function () {
        var ownerPubkey, instruction, signerKeypair, transaction, txResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getOrganizationOwner(name, connection, organizationProgramId)];
                case 1:
                    ownerPubkey = _a.sent();
                    if (ownerKeypair && ownerPubkey.toBase58() != ownerKeypair.publicKey.toBase58()) {
                        throw 'Unable to leave organization, owner account mismatch';
                    }
                    return [4 /*yield*/, leaveOrganizationInstruction(name, factionID, playerKeypair.publicKey, ownerPubkey, playerIsSigned, ownerIsSigned, organizationProgramId)];
                case 2:
                    instruction = _a.sent();
                    if (playerIsSigned && !ownerIsSigned) {
                        signerKeypair = playerKeypair;
                    }
                    else if (!playerIsSigned && ownerIsSigned) {
                        signerKeypair = ownerKeypair;
                    }
                    else {
                        throw 'Invalid mismatch: only player or owner can sign transaction';
                    }
                    transaction = new web3_js_1.Transaction().add(instruction);
                    return [4 /*yield*/, util_1.sendAndConfirmTransaction(connection, transaction, signerKeypair)];
                case 3:
                    txResult = _a.sent();
                    return [2 /*return*/, txResult];
            }
        });
    });
}
exports.leaveOrganization = leaveOrganization;
/**
 * Organization Models
 *
 * TODO: move to separate file
 */
var PlayerOrgInfo = /** @class */ (function () {
    function PlayerOrgInfo(args) {
        this.mudOrgCount = args.mudOrgCount;
        this.oniOrgCount = args.oniOrgCount;
        this.usturOrgCount = args.usturOrgCount;
    }
    return PlayerOrgInfo;
}());
exports.PlayerOrgInfo = PlayerOrgInfo;
var PlayerOrg = /** @class */ (function () {
    function PlayerOrg(args) {
        this.orgId = args.orgId;
        this.factionId = args.factionId;
        this.taxRate = args.taxRate;
        this.maxPlayers = args.maxPlayers;
        this.playerCount = args.playerCount;
        this.approvedPlayerCount = args.approvedPlayerCount;
        this.name = args.name;
        this.isPrivate = args.isPrivate;
        this.ownerPubkey = args.ownerPubkey;
    }
    return PlayerOrg;
}());
exports.PlayerOrg = PlayerOrg;
var PlayerOrgMember = /** @class */ (function () {
    function PlayerOrgMember(args) {
        this.memberIdPrimaryKey = args.memberIdPrimaryKey;
        this.factionId = args.factionId;
        this.orgPubkey = args.orgPubkey;
        this.isOwner = args.isOwner;
        this.ownerApproved = args.ownerApproved;
        this.memberApproved = args.memberApproved;
        this.returnRentToOwner = args.returnRentToOwner;
    }
    return PlayerOrgMember;
}());
exports.PlayerOrgMember = PlayerOrgMember;
exports.ORG_SCHEMA = new Map([
    [
        PlayerOrgInfo,
        {
            kind: 'struct',
            fields: [
                ['mudOrgCount', 'u64'],
                ['oniOrgCount', 'u64'],
                ['usturOrgCount', 'u64'],
            ]
        },
    ],
    [
        PlayerOrg,
        {
            kind: 'struct',
            fields: [
                ['orgId', 'u64'],
                ['factionId', 'u64'],
                ['taxRate', 'u64'],
                ['maxPlayers', 'u64'],
                ['playerCount', 'u64'],
                ['approvedPlayerCount', 'u64'],
                ['name', [32]],
                ['isPrivate', 'u8'],
                ['ownerPubkey', 'pubkey'],
            ]
        },
    ],
    [
        PlayerOrgMember,
        {
            kind: 'struct',
            fields: [
                ['memberIdPrimaryKey', 'u64'],
                ['factionId', 'u64'],
                ['orgPubkey', 'pubkey'],
                ['isOwner', 'u8'],
                ['ownerApproved', 'u8'],
                ['memberApproved', 'u8'],
                ['returnRentToOwner', 'u8'],
            ]
        },
    ]
]);
/**
 * Get all player organizations
 *
 * TODO: remove console logs
 * TODO: filter accounts based on size before query
 */
function getAllPlayerOrgs(connection, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var orgs, i, playerOrgData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.getProgramAccounts(organizationProgramId)];
                case 1:
                    orgs = _a.sent();
                    for (i = 0; i < orgs.length; i++) {
                        if (orgs[i].account.data.length == 113) {
                            playerOrgData = borsh_1.deserializeUnchecked(exports.ORG_SCHEMA, PlayerOrg, orgs[i].account.data);
                            console.log('Saved ' + playerOrgData.isPrivate + ' organization ' + util_1.byteArrayToString(Array.from(playerOrgData.name)) +
                                ' has orgID:' + playerOrgData.orgId + ' for faction ID ' +
                                playerOrgData.factionId + ' with address ' + orgs[i].pubkey.toBase58() + ' with a taxRate of ' +
                                playerOrgData.taxRate + '% and has ' + playerOrgData.approvedPlayerCount + ' approved out of ' + playerOrgData.maxPlayers + ' max players');
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.getAllPlayerOrgs = getAllPlayerOrgs;
/**
* Get all player members of an organization
*
*  TODO: remove console logs
*/
function getAllPlayerMembers(connection, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var members, i, playerMemberData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.getProgramAccounts(organizationProgramId)];
                case 1:
                    members = _a.sent();
                    for (i = 0; i < members.length; i++) {
                        if (members[i].account.data.length == 52) {
                            playerMemberData = borsh_1.deserializeUnchecked(exports.ORG_SCHEMA, PlayerOrgMember, members[i].account.data);
                            console.log(members[i].pubkey.toBase58() +
                                ' Player Member ID:' + playerMemberData.memberIdPrimaryKey + ' belongs to faction ID ' +
                                playerMemberData.factionId + ' for org: ' + playerMemberData.orgPubkey.toBase58());
                            console.log('    Is owner?', playerMemberData.isOwner);
                            console.log('    Owner approved?', playerMemberData.ownerApproved);
                            console.log('    Member approved?', playerMemberData.memberApproved);
                            console.log('    Return rent to owner?', playerMemberData.returnRentToOwner);
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.getAllPlayerMembers = getAllPlayerMembers;
/**
* Get player organization
*
*  TODO: remove console logs
*/
function getPlayerOrg(name, connection, organizationProgramId) {
    return __awaiter(this, void 0, void 0, function () {
        var playerOrgPda, info, playerOrgData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getOrganizationAccount(name, organizationProgramId)];
                case 1:
                    playerOrgPda = (_a.sent())[0];
                    return [4 /*yield*/, connection.getAccountInfo(playerOrgPda, 'recent')];
                case 2:
                    info = _a.sent();
                    playerOrgData = borsh_1.deserializeUnchecked(exports.ORG_SCHEMA, PlayerOrg, info.data);
                    console.log('Saved ' + playerOrgData.isPrivate + ' organization ' + util_1.byteArrayToString(Array.from(playerOrgData.name)) +
                        ' has orgID:' + playerOrgData.orgId + ' for faction ID ' +
                        playerOrgData.factionId + ' with address ' + playerOrgPda.toBase58() + ' with a taxRate of ' +
                        playerOrgData.taxRate + '% and has ' + playerOrgData.approvedPlayerCount + ' approved out of ' + playerOrgData.maxPlayers + ' max players');
                    return [2 /*return*/];
            }
        });
    });
}
exports.getPlayerOrg = getPlayerOrg;
//# sourceMappingURL=organizations.js.map
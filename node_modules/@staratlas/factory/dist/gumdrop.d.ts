/// <reference types="bn.js" />
import { web3, BN } from '@project-serum/anchor';
import { u64 } from '@solana/spl-token';
/**
 * Claim status account
 *
 * isClaimed - whether the gumdrop has been claimed or not
 * claimant - the Solana account that claimed the gumdrop
 * claimedAt - the time at which the gumdrop was claimed
 * amount - the amount that was claimed
 */
export interface ClaimStatusAccount {
    isClaimed: boolean;
    claimant: web3.PublicKey;
    claimedAt: BN;
    amount: BN;
}
/**
 * Parameters for creating a new claim
 *
 * connection - the Solana connection object
 * playerPublicKey - the player's public key
 * programId - the public key of the program to execute (Gumdrop program)
 * claimUrl - the url for this player's claim.  The claim url is obtained from the
 *            "claims" JSON file produced after creating a Gumdrop distributor
 */
export interface ClaimTokenInstructionsParams {
    connection: web3.Connection /** the Solana connection object */;
    claimUrl: string;
    playerPublicKey: web3.PublicKey;
    programId: web3.PublicKey;
}
/**
 * Get the claim status public key
 *
 * @param index - the index of the claim
 * @param distributor - the Gumdrop distributor public key
 * @param programId - the public key of the program to execute (Gumdrop program)
 * @returns [claim account public key, bump seed]
 */
export declare const getClaimStatusKey: (index: u64, distributor: web3.PublicKey, programId?: web3.PublicKey) => Promise<[web3.PublicKey, number]>;
/**
 * Helper method to get the claim status account
 * If this does return a valid account, it means that the drop has been claimed already
 *
 * @param connection - the Solana connection object
 * @param index - the index of the claim
 * @param distributor - the Gumdrop distributor public key
 * @param programId - the public key of the program to execute (Gumdrop program)
 * @returns the claim status account or null if the drop has not been claimed
 */
export declare const getClaimStatusAccount: (connection: web3.Connection, index: BN, distributor: web3.PublicKey, programId?: web3.PublicKey) => Promise<ClaimStatusAccount | null>;
/**
 * Helper method to get multiple claim status accounts
 *
 * @param connection - the Solana connection object
 * @param indexArray - the array of the indices of the claims
 * @param distributor - the Gumdrop distributor public key
 * @param programId - the public key of the program to execute (Gumdrop program)
 * @returns array the claim status accounts or null if the drop has not been claimed
 */
export declare const getMultipleClaimStatusAccounts: (connection: web3.Connection, indexArray: BN[], distributor: web3.PublicKey, programId?: web3.PublicKey) => Promise<Array<ClaimStatusAccount | null>>;
/**
 * Generate the instruction(s) to claim tokens from the Gumdrop distributor
 * This only works for a distributor configured to deal with fungible token
 * transfers to Solana wallets.
 *
 * @param params - the parameters for the instruction
 * @returns array of Solana transaction instructions
 */
export declare const claimTokenInstructions: (params: ClaimTokenInstructionsParams) => Promise<web3.TransactionInstruction[]>;
//# sourceMappingURL=gumdrop.d.ts.map
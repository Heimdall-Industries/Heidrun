"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.getPlayersOfFaction = exports.getAllPlayers = exports.getPlayer = exports.enlistToFaction = exports.getPlayerFactionPDA = exports.getIDL = exports.FactionType = void 0;
var anchor_1 = require("@project-serum/anchor");
var baseIdl = {
    'version': '0.0.0',
    'name': 'enlist_to_faction',
    'instructions': [
        {
            'name': 'processEnlistPlayer',
            'accounts': [
                {
                    'name': 'playerFactionAccount',
                    'isMut': true,
                    'isSigner': false
                },
                {
                    'name': 'playerAccount',
                    'isMut': false,
                    'isSigner': true
                },
                {
                    'name': 'systemProgram',
                    'isMut': false,
                    'isSigner': false
                },
                {
                    'name': 'clock',
                    'isMut': false,
                    'isSigner': false
                }
            ],
            'args': [
                {
                    'name': 'bump',
                    'type': 'u8'
                },
                {
                    'name': 'factionId',
                    'type': 'u8'
                }
            ]
        }
    ],
    'accounts': [
        {
            'name': 'PlayerFactionData',
            'type': {
                'kind': 'struct',
                'fields': [
                    {
                        'name': 'owner',
                        'type': 'publicKey'
                    },
                    {
                        'name': 'enlistedAtTimestamp',
                        'type': 'i64'
                    },
                    {
                        'name': 'factionId',
                        'type': 'u8'
                    },
                    {
                        'name': 'bump',
                        'type': 'u8'
                    },
                    {
                        'name': 'padding',
                        'type': {
                            'array': [
                                'u64',
                                5
                            ]
                        }
                    }
                ]
            }
        }
    ],
    'errors': [
        {
            'code': 300,
            'name': 'FactionTypeError',
            'msg': 'Faction ID must be 0, 1, or 2.'
        }
    ],
    'metadata': {
        'address': ''
    }
};
var FACTION_PREFIX = 'FACTION_ENLISTMENT';
var FactionType;
(function (FactionType) {
    FactionType[FactionType["Unenlisted"] = -1] = "Unenlisted";
    FactionType[FactionType["MUD"] = 0] = "MUD";
    FactionType[FactionType["ONI"] = 1] = "ONI";
    FactionType[FactionType["Ustur"] = 2] = "Ustur";
})(FactionType = exports.FactionType || (exports.FactionType = {}));
function getIDL(programId) {
    var _tmp = baseIdl;
    _tmp['metadata']['address'] = programId.toBase58();
    return _tmp;
}
exports.getIDL = getIDL;
function getPlayerFactionPDA(playerPublicKey, programId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, anchor_1.web3.PublicKey.findProgramAddress([
                    Buffer.from(FACTION_PREFIX, 'utf8'),
                    playerPublicKey.toBuffer(),
                ], programId)];
        });
    });
}
exports.getPlayerFactionPDA = getPlayerFactionPDA;
/**
 *  Create transaction instruction which can be used to enlist a player to a faction.
 */
function enlistToFaction(connection, factionID, playerPublicKey, programId) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, playerFactionPda, bump, idl, provider, program, txInstruction;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getPlayerFactionPDA(playerPublicKey, programId)];
                case 1:
                    _a = _b.sent(), playerFactionPda = _a[0], bump = _a[1];
                    idl = getIDL(programId);
                    provider = new anchor_1.Provider(connection, null, null);
                    program = new anchor_1.Program(idl, programId, provider);
                    return [4 /*yield*/, program.instruction.processEnlistPlayer(bump, factionID, {
                            accounts: {
                                playerFactionAccount: playerFactionPda,
                                playerAccount: playerPublicKey,
                                systemProgram: anchor_1.web3.SystemProgram.programId,
                                clock: anchor_1.web3.SYSVAR_CLOCK_PUBKEY
                            }
                        })];
                case 2:
                    txInstruction = _b.sent();
                    return [2 /*return*/, txInstruction];
            }
        });
    });
}
exports.enlistToFaction = enlistToFaction;
/**
 * Get a player's faction information
 */
function getPlayer(connection, playerPublicKey, programId) {
    return __awaiter(this, void 0, void 0, function () {
        var provider, idl, program, playerFactionPDA, obj;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new anchor_1.Provider(connection, null, null);
                    idl = getIDL(programId);
                    program = new anchor_1.Program(idl, programId, provider);
                    return [4 /*yield*/, getPlayerFactionPDA(playerPublicKey, programId)];
                case 1:
                    playerFactionPDA = (_a.sent())[0];
                    return [4 /*yield*/, program.account.playerFactionData.fetch(playerFactionPDA)];
                case 2:
                    obj = _a.sent();
                    return [2 /*return*/, obj];
            }
        });
    });
}
exports.getPlayer = getPlayer;
/**
 * Get all players
 */
function getAllPlayers(connection, programId) {
    return __awaiter(this, void 0, void 0, function () {
        var provider, idl, program, programAccounts, players;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new anchor_1.Provider(connection, null, null);
                    idl = getIDL(programId);
                    program = new anchor_1.Program(idl, programId, provider);
                    return [4 /*yield*/, program.account.playerFactionData.all()];
                case 1:
                    programAccounts = _a.sent();
                    players = programAccounts
                        .map(function (player) { return player.account; });
                    return [2 /*return*/, players];
            }
        });
    });
}
exports.getAllPlayers = getAllPlayers;
/**
 * Get all players of a specified faction
 */
function getPlayersOfFaction(connection, factionID, programId) {
    return __awaiter(this, void 0, void 0, function () {
        var provider, idl, program, programAccounts, filtered;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new anchor_1.Provider(connection, null, null);
                    idl = getIDL(programId);
                    program = new anchor_1.Program(idl, programId, provider);
                    return [4 /*yield*/, program.account.playerFactionData.all()];
                case 1:
                    programAccounts = _a.sent();
                    filtered = programAccounts
                        .map(function (player) { return player.account; })
                        .filter(function (player) { return player.factionId == factionID; });
                    return [2 /*return*/, filtered];
            }
        });
    });
}
exports.getPlayersOfFaction = getPlayersOfFaction;
//# sourceMappingURL=factions.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.claimTokenInstructions = exports.getMultipleClaimStatusAccounts = exports.getClaimStatusAccount = exports.getClaimStatusKey = void 0;
var anchor_1 = require("@project-serum/anchor");
var spl_token_1 = require("@solana/spl-token");
var bs58 = __importStar(require("bs58"));
var helpers_1 = require("./util/helpers");
var gumdropIdl_1 = require("./util/gumdropIdl");
var GUMDROP_DISTRIBUTOR_ID = new anchor_1.web3.PublicKey('gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a');
/**
 * Get the claim status public key
 *
 * @param index - the index of the claim
 * @param distributor - the Gumdrop distributor public key
 * @param programId - the public key of the program to execute (Gumdrop program)
 * @returns [claim account public key, bump seed]
 */
var getClaimStatusKey = function (index, distributor, programId) {
    if (programId === void 0) { programId = GUMDROP_DISTRIBUTOR_ID; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, anchor_1.web3.PublicKey.findProgramAddress([
                        Buffer.from('ClaimStatus'),
                        index.toArrayLike(Buffer, 'le', 8),
                        distributor.toBuffer(),
                    ], programId)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
};
exports.getClaimStatusKey = getClaimStatusKey;
/**
 * Helper method to get the claim status account
 * If this does return a valid account, it means that the drop has been claimed already
 *
 * @param connection - the Solana connection object
 * @param index - the index of the claim
 * @param distributor - the Gumdrop distributor public key
 * @param programId - the public key of the program to execute (Gumdrop program)
 * @returns the claim status account or null if the drop has not been claimed
 */
var getClaimStatusAccount = function (connection, index, distributor, programId) {
    if (programId === void 0) { programId = GUMDROP_DISTRIBUTOR_ID; }
    return __awaiter(void 0, void 0, void 0, function () {
        var provider, program, claimStatusResult, account, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new anchor_1.Provider(connection, null, null);
                    program = new anchor_1.Program(gumdropIdl_1.gumDropIdl, programId, provider);
                    return [4 /*yield*/, exports.getClaimStatusKey(index, distributor, programId)];
                case 1:
                    claimStatusResult = _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, program.account.claimStatus.fetch(claimStatusResult[0])];
                case 3:
                    account = _a.sent();
                    return [2 /*return*/, account];
                case 4:
                    e_1 = _a.sent();
                    return [2 /*return*/, null];
                case 5: return [2 /*return*/];
            }
        });
    });
};
exports.getClaimStatusAccount = getClaimStatusAccount;
/**
 * Helper method to get multiple claim status accounts
 *
 * @param connection - the Solana connection object
 * @param indexArray - the array of the indices of the claims
 * @param distributor - the Gumdrop distributor public key
 * @param programId - the public key of the program to execute (Gumdrop program)
 * @returns array the claim status accounts or null if the drop has not been claimed
 */
var getMultipleClaimStatusAccounts = function (connection, indexArray, distributor, programId) {
    if (programId === void 0) { programId = GUMDROP_DISTRIBUTOR_ID; }
    return __awaiter(void 0, void 0, void 0, function () {
        var provider, program, claimStatusPromises, claimStatusKeys, accounts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new anchor_1.Provider(connection, null, null);
                    program = new anchor_1.Program(gumdropIdl_1.gumDropIdl, programId, provider);
                    claimStatusPromises = indexArray.map(function (it) {
                        return exports.getClaimStatusKey(it, distributor, programId);
                    });
                    return [4 /*yield*/, Promise.all(claimStatusPromises)];
                case 1:
                    claimStatusKeys = (_a.sent()).map(function (it) { return it[0]; });
                    return [4 /*yield*/, program.account.claimStatus.fetchMultiple(claimStatusKeys)];
                case 2:
                    accounts = _a.sent();
                    return [2 /*return*/, accounts];
            }
        });
    });
};
exports.getMultipleClaimStatusAccounts = getMultipleClaimStatusAccounts;
/**
 * Generate the instruction(s) to claim tokens from the Gumdrop distributor
 * This only works for a distributor configured to deal with fungible token
 * transfers to Solana wallets.
 *
 * @param params - the parameters for the instruction
 * @returns array of Solana transaction instructions
 */
var claimTokenInstructions = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var connection, claimUrl, playerPublicKey, programId, options, distributorKeyStr, claimantKeyStr, claimAmountStr, claimantIndexStr, proofStr, tokenAccStr, proof, distributorKey, distributorTokenKey, distTokenAccount, tokenAccountInfo, distributorMintKey, claimantKey, claimantTokenKey, claimantTokenAccount, index, amount, _a, claimStatusKey, nonce, provider, program, instructions;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                connection = params.connection, claimUrl = params.claimUrl, playerPublicKey = params.playerPublicKey, programId = params.programId;
                options = new URLSearchParams(claimUrl.split('?')[1]);
                distributorKeyStr = options.get('distributor');
                claimantKeyStr = options.get('handle');
                claimAmountStr = options.get('amount');
                claimantIndexStr = options.get('index');
                proofStr = options.get('proof');
                tokenAccStr = options.get('tokenAcc');
                if (!distributorKeyStr ||
                    !claimantKeyStr ||
                    !claimAmountStr ||
                    !claimantIndexStr ||
                    !proofStr ||
                    !tokenAccStr) {
                    throw new Error('Invalid claim');
                }
                proof = proofStr === ''
                    ? []
                    : proofStr.split(',').map(function (b) {
                        var ret = Buffer.from(bs58.decode(b));
                        if (ret.length !== 32) {
                            throw new Error('Invalid proof hash length');
                        }
                        return ret;
                    });
                distributorKey = new anchor_1.web3.PublicKey(distributorKeyStr);
                distributorTokenKey = new anchor_1.web3.PublicKey(tokenAccStr);
                return [4 /*yield*/, connection.getAccountInfo(distributorTokenKey)];
            case 1:
                distTokenAccount = _b.sent();
                if (distTokenAccount === null) {
                    throw new Error('Could not fetch distributor token account');
                }
                tokenAccountInfo = spl_token_1.AccountLayout.decode(distTokenAccount.data);
                distributorMintKey = new anchor_1.web3.PublicKey(tokenAccountInfo.mint);
                claimantKey = new anchor_1.web3.PublicKey(claimantKeyStr);
                return [4 /*yield*/, helpers_1.getAssociatedTokenAddress(claimantKey, distributorMintKey)];
            case 2:
                claimantTokenKey = _b.sent();
                return [4 /*yield*/, connection.getParsedTokenAccountsByOwner(claimantKey, {
                        mint: distributorMintKey
                    })];
            case 3:
                claimantTokenAccount = _b.sent();
                index = new anchor_1.BN(claimantIndexStr);
                amount = new anchor_1.BN(claimAmountStr);
                return [4 /*yield*/, exports.getClaimStatusKey(index, distributorKey, programId)];
            case 4:
                _a = _b.sent(), claimStatusKey = _a[0], nonce = _a[1];
                provider = new anchor_1.Provider(connection, null, null);
                program = new anchor_1.Program(gumdropIdl_1.gumDropIdl, programId, provider);
                instructions = [];
                // if the claimant toke account does not exist, create it
                if (claimantTokenAccount.value.length === 0) {
                    instructions.push(spl_token_1.Token.createAssociatedTokenAccountInstruction(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, distributorMintKey, claimantTokenKey, claimantKey, playerPublicKey));
                }
                instructions.push(program.instruction.claim(nonce /** the claim status account nonce */, index /** the index */, amount /** the amount */, playerPublicKey, proof /** proof */, {
                    accounts: {
                        distributor: distributorKey,
                        claimStatus: claimStatusKey,
                        from: distributorTokenKey,
                        to: claimantTokenKey,
                        temporal: playerPublicKey,
                        payer: playerPublicKey,
                        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                        systemProgram: anchor_1.web3.SystemProgram.programId
                    }
                }));
                return [2 /*return*/, instructions];
        }
    });
}); };
exports.claimTokenInstructions = claimTokenInstructions;
//# sourceMappingURL=gumdrop.js.map
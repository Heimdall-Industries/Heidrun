/// <reference types="node" />
import { PublicKey, TransactionInstruction, Keypair, Connection } from '@solana/web3.js';
/**
 * Convert organization name string to byte array
 */
export declare function getOrgNameBytes(name: string): any[];
/**
 * Get the organization info account
 */
export declare function getOrgInfoAccount(organizationProgramId: PublicKey): Promise<[PublicKey, number]>;
/**
 * Get the organization account based on the name
 */
export declare function getOrganizationAccount(name: string, organizationProgramId: PublicKey): Promise<[PublicKey, number]>;
/**
 * Get the player's member account for a specific organization
 */
export declare function getPlayerMemberAccount(name: string, playerKey: PublicKey, organizationProgramId: PublicKey): Promise<[PublicKey, number]>;
/**
 * Get player organization owner
 */
export declare function getOrganizationOwner(name: string, connection: Connection, organizationProgramId: PublicKey): Promise<PublicKey>;
/**
 * Create initialize player organization info account instruction
 */
export declare function initOrganizationInfoInstruction(payerKey: PublicKey, organizationProgramId: PublicKey): Promise<TransactionInstruction>;
/**
 * Initialize player organization info account
 */
export declare function initOrganizationInfo(connection: Connection, payerKeypair: Keypair, organizationProgramId: PublicKey): Promise<string>;
/**
 * Create a Create Player Organization transaction instruction
 */
export declare function createOrganizationInstruction(name: string, factionID: number, maxPlayers: number, taxRate: number, isPrivate: boolean, payerKey: PublicKey, organizationProgramId: PublicKey, factionEnlistmentProgramId: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a player organization
 *
 * Initialize player organization info account
 * name: name of organization
 * factionID: faction this organization belongs to
 * maxPlayers: max amount of approved players
 * taxRate: tax rate for organization
 * isPrivate: if set, requires owner to approve all players
 * payerKey: account to create organization from - signer + pays fees
 * organizationProgramId: program Id for organizations
 */
export declare function createOrganization(connection: Connection, name: string, factionID: number, maxPlayers: number, taxRate: number, isPrivate: boolean, payerKeypair: Keypair, organizationProgramId: PublicKey, factionEnlistmentProgramId: PublicKey): Promise<string>;
/**
 * Create an Approve Player transaction instruction
 */
export declare function approvePlayerInstruction(name: string, ownerKey: PublicKey, playerKey: PublicKey, organizationProgramId: PublicKey): Promise<TransactionInstruction>;
/**
 * Approve a player to join an organization
 * (for private orgs only)
 *
 * name: name of organization
 * ownerKeypair: owner of organization - signer
 * playerKey: player to approve
 * organizationProgramId: program Id for organizations
 */
export declare function approvePlayer(connection: Connection, name: string, ownerKeypair: Keypair, playerKey: PublicKey, organizationProgramId: PublicKey): Promise<string>;
/**
 * Create a Join Organization transaction instruction
 */
export declare function joinOrganizationInstruction(name: string, factionID: number, playerKey: PublicKey, ownerKey: PublicKey, playerIsSigned: boolean, ownerIsSigned: boolean, organizationProgramId: PublicKey, factionEnlistmentProgramId: PublicKey): Promise<TransactionInstruction>;
/**
 * Join a player organization
 *
 * name: name of organization
 * factionID: factionID of organization
 * playerKey: player to join organization
 * playerIsSigned: if player joins themselves, player needs to sign
 * ownerIsSigned: if owner joins a player, owner needs to sign
 * connection: Solana Connection
 * organizationProgramId: program Id for organizations
 */
export declare function joinOrganization(connection: Connection, name: string, factionID: number, playerKeypair: Keypair, ownerKeypair: Keypair, playerIsSigned: boolean, ownerIsSigned: boolean, organizationProgramId: PublicKey, factionEnlistmentProgramId: PublicKey): Promise<string>;
/**
 * Create a Leave Organization transaction instruction
 */
export declare function leaveOrganizationInstruction(name: string, factionID: number, playerKey: PublicKey, ownerKey: PublicKey, playerIsSigned: boolean, ownerIsSigned: boolean, organizationProgramId: PublicKey): Promise<TransactionInstruction>;
/**
 * Leave an organization
 *
 * (or Kick a player from the organization via Owner)
 *
 * name: name of organization
 * factionID: factionID of organization
 * playerKey: player to join organization
 * ownerKey: owner of organization - can kick player from organization
 * playerIsSigned: if player joins themselves, player needs to sign
 * ownerIsSigned: if owner joins a player, owner needs to sign
 * connection: Solana Connection
 * organizationProgramId: program Id for organizations
 */
export declare function leaveOrganization(name: string, factionID: number, playerKeypair: Keypair, ownerKeypair: Keypair, playerIsSigned: boolean, ownerIsSigned: boolean, connection: Connection, organizationProgramId: PublicKey): Promise<string>;
/**
 * Organization Models
 *
 * TODO: move to separate file
 */
export declare class PlayerOrgInfo {
    mudOrgCount: number;
    oniOrgCount: number;
    usturOrgCount: number;
    constructor(args: {
        mudOrgCount: number;
        oniOrgCount: number;
        usturOrgCount: number;
    });
}
export declare class PlayerOrg {
    orgId: number;
    factionId: number;
    taxRate: number;
    maxPlayers: number;
    playerCount: number;
    approvedPlayerCount: number;
    name: Buffer;
    isPrivate: boolean;
    ownerPubkey: PublicKey;
    constructor(args: {
        orgId: number;
        factionId: number;
        taxRate: number;
        maxPlayers: number;
        playerCount: number;
        approvedPlayerCount: number;
        name: Buffer;
        isPrivate: boolean;
        ownerPubkey: PublicKey;
    });
}
export declare class PlayerOrgMember {
    memberIdPrimaryKey: number;
    factionId: number;
    orgPubkey: PublicKey;
    isOwner: boolean;
    ownerApproved: boolean;
    memberApproved: boolean;
    returnRentToOwner: boolean;
    constructor(args: {
        memberIdPrimaryKey: number;
        factionId: number;
        orgPubkey: PublicKey;
        isOwner: boolean;
        ownerApproved: boolean;
        memberApproved: boolean;
        returnRentToOwner: boolean;
    });
}
export declare const ORG_SCHEMA: Map<any, any>;
/**
 * Get all player organizations
 *
 * TODO: remove console logs
 * TODO: filter accounts based on size before query
 */
export declare function getAllPlayerOrgs(connection: Connection, organizationProgramId: PublicKey): Promise<void>;
/**
* Get all player members of an organization
*
*  TODO: remove console logs
*/
export declare function getAllPlayerMembers(connection: Connection, organizationProgramId: PublicKey): Promise<void>;
/**
* Get player organization
*
*  TODO: remove console logs
*/
export declare function getPlayerOrg(name: string, connection: Connection, organizationProgramId: PublicKey): Promise<void>;
//# sourceMappingURL=organizations.d.ts.map